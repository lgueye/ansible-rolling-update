---
# Disable host on LB
- name: disable host on lb
  haproxy: state="disabled" host="{{ inventory_hostname }}"
  delegate_to: "{{ hostvars[groups['lb'][0]]['ansible_eth0']['ipv4']['address'] }}"

# Stop service
- name: ensure service is stopped
  service: name="rolling-update-app-api" state="stopped"

- name: create deploy dir if source link does not exist
  file: state="directory" dest="{{ app.node_source_link_path }}/{{ rev }}"

- name: unlink target link
  file: state="absent" dest="{{ app.node_target_link_path }}"

- name: link target link
  file: state="link" src="{{ app.node_source_link_path }}/{{ rev }}" dest="{{ app.node_target_link_path }}"

- name: copy jar
  copy: src="{{ app.local_app_path }}/api/target/rolling-update-app-api.jar" dest="{{ app.node_target_link_path }}/"

- name: copy app config
  copy: src="{{ app.local_app_path }}/api/target/rolling-update-app-api.yml" dest="{{ app.node_target_link_path }}/"

- name: copy log config
  copy: src="{{ app.local_app_path }}/api/target/logback.xml" dest="{{ app.node_target_link_path }}/"

- name: unix service | copy config
  copy: src="{{ app.local_app_path }}/api/target/classes/rolling-update-app-api.sh" dest="{{ app.node_target_link_path }}/" mode="u=xrw,g=xr,o=r"

# Start app
- name: ensure service is started
  service: name="rolling-update-app-api" state="started"

- name: unix service | wait for port to be up
  wait_for: port="{{ app.port }}" delay=10 timeout="20"

# Enable host on LB
- name: enable host on lb
  haproxy: state="enabled" host="{{ inventory_hostname }}"
  delegate_to: "{{ hostvars[groups['lb'][0]]['ansible_eth0']['ipv4']['address'] }}"

