---

# Sequence:
# - create instances
# - register instances in groups
# - register new instances in the known hosts files for flawless authentication
- hosts: "localhost"
  connection: "local"
  vars:
    ssh_known_hosts_file: "~/.ssh/known_hosts"

  tasks:
  - name: droplets | create
    digital_ocean: state="active" command="droplet" name="{{ item }}" size_id="62" region_id="2" image_id="13089493" ssh_key_ids="625455" wait_timeout="500" unique_name="yes"
    with_items:
    - "rolling-update-app-1"
    - "rolling-update-app-2"
    - "rolling-update-app-3"
    - "lb"
    register: droplets

  - name: droplets | register app IP
    add_host: name="{{ item.droplet.ip_address }}" groups="rolling-update-app"
    when: "'rolling-update-app' in item.droplet.name"
    with_items: droplets.results

  - name: droplets | register lb IP
    add_host: name="{{ item.droplet.ip_address }}" groups="lb"
    when: "'lb' in item.droplet.name"
    with_items: droplets.results

  - name: make sure the known hosts file exists
    file: path="{{ ssh_known_hosts_file }}" state="touch"

  - name: droplets | remove from known hosts
    shell: "ssh-keygen -R {{ item.droplet.ip_address }}"
    with_items: droplets.results

  - name: droplets | add to know hosts
    shell: "ssh-keyscan -H -T 10 {{ item.droplet.ip_address }} >> {{ ssh_known_hosts_file }}"
    with_items: droplets.results

# Sequence:
# - register sudo user to operate with the instances
- hosts: "rolling-update-app:lb"
  remote_user: "root"
  roles:
  - {role: "security"}

# Sequence:
# - clone to assess if deployment is required (check install revision against required one)
- hosts: "localhost"
  connection: "local"
  roles:
  - {role: "clone-app", rev: "{{ app_rev1 }}" }

# Sequence:
# - register installed revision on host
- hosts: "rolling-update-app"
  remote_user: "{{ node_management_user }}"
  sudo: "yes"
  vars_files:
  - "roles/shared/vars/main.yml"

  tasks:
  - name: application | register stats for source link
    stat: path="{{ app.node_source_link_path }}/{{ app_rev1 }}/rolling-update-app-api.jar"
    register: "app_rev1_stats"

# Sequence:
# - deploy app if required
# - start app
# - register app as lb node
- hosts: "rolling-update-app"
  remote_user: "{{ node_management_user }}"
  sudo: "yes"
  roles:
#  - {role: "deploy-app", rev: "{{ app_rev1 }}", when: "app_rev1_stats.stat.exists == false"}
#  - {role: "start-app", rev: "{{ app_rev1 }}", when: "app_rev1_stats.stat.exists == false"}
#  - {role: "add-lb-node", rev: "{{ app_rev1 }}", when: "app_rev1_stats.stat.exists == false"}
  - {role: "deploy-app", rev: "{{ app_rev1 }}"}
  - {role: "start-app", rev: "{{ app_rev1 }}"}
  - {role: "add-lb-node", rev: "{{ app_rev1 }}"}

# Sequence:
# - install fair carrousel
- hosts: "lb"
  remote_user: "nodemanager"
  sudo: "yes"
  roles:
  - {role: "lb"}

# Sequence:
# - test cluster
- hosts: "localhost"
  connection: "local"
  roles:
  - {role: "test-app"}

# Sequence:
# - clone to assess need deployment (check install revision against required one)
#- hosts: "rolling-update-app"
#  remote_user: "{{ node_management_user }}"
#  sudo: "yes"
#  roles:
#  - {role: "clone-app", rev: "{{ app_rev2 }}"}

# Sequence:
# - register installed revision on host

#- hosts: "rolling-update-app"
#  remote_user: "{{ node_management_user }}"
#  sudo: "yes"
#  vars_files:
#  - "roles/shared/vars/main.yml"
#
#  tasks:
#  - name: application | register stats for source link
#    stat: path="{{ app.node_source_link_path }}/{{ app_rev2 }}/rolling-update-app-api.jar"
#    register: "app_rev2_stats"

# Sequence:
# - unregister app as lb node
# - stop app
# - deploy new app revision
# - start app
# - register app as lb node

#- hosts: "rolling-update-app"
#  remote_user: "{{ node_management_user }}"
#  sudo: "yes"
#  roles:
#  - {role: "remove-lb-node", when: "app_rev2_stats.stat.exists == false"}
#  - {role: "stop-app", when: "app_rev2_stats.stat.exists == false"}
#  - {role: "deploy-app", rev: "{{ app_rev2 }}", when: "app_rev2_stats.stat.exists == false"}
#  - {role: "start-app", rev: "{{ app_rev2 }}"}
#  - {role: "add-lb-node", rev: "{{ app_rev2 }}"}

#- hosts: "rolling-update-app"
#  remote_user: "{{ node_management_user }}"
#  sudo: "yes"
#  roles:
#  - {role: "rolling-update", rev: "{{ app_rev2 }}", when: "app_rev2_stats.stat.exists == false"}

# Sequence:
# - test cluster

#- hosts: "localhost"
#  connection: "local"
#  roles:
#  - {role: "test-app"}

# Sequence:
# - drop instances

  tasks:
  - name:  droplets | delete
    digital_ocean: state="deleted" command="droplet" id="{{ item.droplet.id }}" ssh_key_ids="625455" wait_timeout="500"
    with_items: droplets.results
